{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../src/middleware/auth.ts"],"names":[],"mappings":";;;;;AAAA,gEAA+B;AAO/B,MAAM,IAAI,GAAG,CAAC,GAAgB,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACnE,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAEzC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,CAAC,CAAC;QAC3D,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC;QACnB,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC;IAC1D,CAAC;AACH,CAAC,CAAC;AAEF,kBAAe,IAAI,CAAC","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\ninterface AuthRequest extends Request {\r\n  user?: any;\r\n}\r\n\r\nconst auth = (req: AuthRequest, res: Response, next: NextFunction) => {\r\n  const token = req.header(\"x-auth-token\");\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ message: \"No token, authorization denied\" });\r\n  }\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!);\r\n    req.user = decoded;\r\n    next();\r\n  } catch (err) {\r\n    res.status(401).json({ message: \"Token is not valid\" });\r\n  }\r\n};\r\n\r\nexport default auth;\r\n"]}