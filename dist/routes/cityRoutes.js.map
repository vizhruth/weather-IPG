{"version":3,"file":"cityRoutes.js","sourceRoot":"","sources":["../../src/routes/cityRoutes.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,0DAA6C;AAC7C,8DAAsC;AAEtC,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,cAAI,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;IAC5C,IAAI,CAAC;QACH,MAAM,IAAI,GAAQ,MAAM,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;IAC/B,CAAC;IAAC,OAAO,GAAO,EAAE,CAAC;QACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,cAAI,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;IAC7C,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAE1B,IAAI,CAAC;QACH,MAAM,IAAI,GAAQ,MAAM,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEnD,IAAI,IAAI,EAAE,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,IAAI,EAAE,IAAI,EAAE,CAAC;QACnB,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACzB,CAAC;IAAC,OAAO,GAAO,EAAE,CAAC;QACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAI,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;IACpD,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAE5B,IAAI,CAAC;QACH,MAAM,IAAI,GAAQ,MAAM,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,IAAI,EAAE,IAAI,EAAE,CAAC;QACnB,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACzB,CAAC;IAAC,OAAO,GAAO,EAAE,CAAC;QACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import express from \"express\";\r\nimport User, { IUser } from \"../models/User\";\r\nimport auth from \"../middleware/auth\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", auth, async (req: any, res) => {\r\n  try {\r\n    const user: any = await User.findById(req.user.id);\r\n    res.json(user?.cities || []);\r\n  } catch (err:any) {\r\n    console.error(err.message);\r\n    res.status(500).send(\"Server error\");\r\n  }\r\n});\r\n\r\nrouter.post(\"/\", auth, async (req: any, res) => {\r\n  const { city } = req.body;\r\n\r\n  try {\r\n    const user: any = await User.findById(req.user.id);\r\n\r\n    if (user?.cities.length >= 5) {\r\n      return res.status(400).json({ message: \"Max 5 cities allowed\" });\r\n    }\r\n\r\n    user?.cities.push(city);\r\n    await user?.save();\r\n    res.json(user?.cities);\r\n  } catch (err:any) {\r\n    console.error(err.message);\r\n    res.status(500).send(\"Server error\");\r\n  }\r\n});\r\n\r\nrouter.delete(\"/:city\", auth, async (req: any, res) => {\r\n  const { city } = req.params;\r\n\r\n  try {\r\n    const user: any = await User.findById(req.user.id);\r\n    user?.cities.pull(city);\r\n    await user?.save();\r\n    res.json(user?.cities);\r\n  } catch (err:any) {\r\n    console.error(err.message);\r\n    res.status(500).send(\"Server error\");\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}