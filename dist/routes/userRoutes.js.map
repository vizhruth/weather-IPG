{"version":3,"file":"userRoutes.js","sourceRoot":"","sources":["../../src/routes/userRoutes.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,wDAA8B;AAC9B,gEAA+B;AAC/B,0DAA6C;AAE7C,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,qBAAqB;AACrB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAExC,IAAI,CAAC;QACH,IAAI,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC5C,IAAI,IAAI,EAAE,CAAC;YACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtC,MAAM,cAAc,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAEzD,+BAA+B;QAC/B,IAAI,GAAG,IAAI,cAAI,CAAC;YACd,QAAQ;YACR,QAAQ,EAAE,cAAc;YACxB,MAAM,EAAE,EAAE;SACX,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAElB,uBAAuB;QACvB,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,EAAE;YAChE,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,wCAAwC;AACxC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACvC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAExC,IAAI,CAAC;QACH,MAAM,IAAI,GAAQ,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW,EAAE;YAChE,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import express from \"express\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport User, { IUser } from \"../models/User\";\r\n\r\nconst router = express.Router();\r\n\r\n// Registration Route\r\nrouter.post(\"/register\", async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    let user = await User.findOne({ username });\r\n    if (user) {\r\n      return res.status(400).json({ message: \"User already exists\" });\r\n    }\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    // Create and save the new user\r\n    user = new User({\r\n      username,\r\n      password: hashedPassword,\r\n      cities: [],\r\n    });\r\n\r\n    await user.save();\r\n\r\n    // Generate a JWT token\r\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET!, {\r\n      expiresIn: \"1h\",\r\n    });\r\n\r\n    res.json({ token, user: { username: user.username, cities: user.cities } });\r\n  } catch (err: any) {\r\n    console.error(err.message);\r\n    res.status(500).send(\"Server error\");\r\n  }\r\n});\r\n\r\n// Login Route (already provided by you)\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const user: any = await User.findOne({ username });\r\n    if (!user) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET!, {\r\n      expiresIn: \"1h\",\r\n    });\r\n    res.json({ token, user: { username: user.username, cities: user.cities } });\r\n  } catch (err: any) {\r\n    console.error(err.message);\r\n    res.status(500).send(\"Server error\");\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}